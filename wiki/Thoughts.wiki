# Random thoughts One Port to Rule Them All

= Introduction =
This is introduction material! Anyway code lacks 1) closing connections across the bridge  and 2) opening two ports.  Then, AFAIK it should work for limited use, especially with PHP. We can even host the PHP portion on planetlab1.byu.edu and just point there for setup, and it should just work for open communication on a few ports if you so desire it.

= Random thots =
Maybe could do SSH tunnel for the same effect?

We could do the HTML 'map me a port' AND the DNS 'map me a port' where HTML might be more accurate, but both would seem to work, and HTML is less automatic, but hey.

Could use tracepath, queries

Load Balancing.
A good host that's close, but the host should be between the two clients. There always is a best host. Find it.


Smarter miscreant client (straight through TCP). One that contributes, even. Very low prio. 

Could research to see if this has been done (I think it has) before.

Could write a client for the outside hosts so they don't use the proxies/dynamic dns [then it's really close to jxta java p2p]. Then STUN would be faster. Low Prio.

TODO: Use OpenDHT for available proxies.

Research ways to open more ports:
  miscreants tell you which ports they want open (one to one mapping).
  or their (normal) 3114 -> local 80
  or request a port range,
  or 10 different ones on every proxy
  or myname800.us.org -> some proxy that is running it on 800 and can work with ya (yes).

maybe a distinct port (random) for a miscreant if they want to ensure they are good (open a new one on the proxy). Random or requested.

Research into problems with communication.

Login system: use the sweet logins via web (javascript?) or the smarter client they have to install--one or the other (smart clients generally frowned upon).

Maybe an azureus plugin to just use this other name (nice). Low prio. Like way low.



Warn about security!


DNS: if from dns then connect similar, theoretically other queries near would be from same (in theory).  So a new query from the same dns server should go to a new proxy (hopefully still a good proxy) to avoid conflicts--I think.  Re-requests to the same place can/should safely go to the same place (for us for now just re-send it 'next request goes to here').

Passwords: 



= Security =
Enforce a EULA.
Tell them to only use a secure program that they trust.
It only opens (as of now) a few ports, so that's nice for security. It's punching a small hole through the firewalls :)

Could do username, password using diffie-hellman or "weak passwords" from the host--nice. Not yet necessary tell them to only use public things that are secure. Could be 'allow connection only once' or what not, to be better security.

Also could do: HTTP request at beginning, to fake out filters.
HTTP proxy guy.

Round Robin Fair Queue with a cap would be nice.

Using this system will not really 'hide' you from anyone, because the DNS queries (or web page login) must originate from you in order for it to work, so it is trivially trackable. This does not provide anonymity.

= Wiki Coding How-to =

  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages